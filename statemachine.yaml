Comment: "Managing Long Lived Transactions with AWS Step Functions State Machine"
StartAt: ProcessOrder
TimeoutSeconds: 15
States:
  ProcessOrder:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: "${NewOrderFunction}"
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: ProcessPayment
    Comment: First transaction to save the order and set the order status to new
    Catch:
      - ErrorEquals:
          - ErrProcessOrder
        Next: UpdateOrderStatus
        ResultPath: $.error
    TimeoutSeconds: 10

  ProcessPayment:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: "${DebitPaymentFunction}"
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: ReserveInventory
    Comment: Task processes the order payment
    Catch:
      - ErrorEquals:
          - ErrProcessPayment
        Next: ProcessRefund
        ResultPath: $.error
    TimeoutSeconds: 10

  ReserveInventory:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: "${ReserveInventoryFunction}"
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: "sns:NotifySuccess"
    Comment: Task to reserve order items in inventory
    Catch:
      - ErrorEquals:
          - ErrReserveInventory
        Next: ReleaseInventory
        ResultPath: $.error
    TimeoutSeconds: 10

  "sns:NotifySuccess":
    Type: Task
    Resource: "arn:aws:states:::sns:publish"
    Parameters:
      Message.$: $.order_id
      TopicArn: "${SagaTopic}"
    ResultPath: $.notification
    Next: OrderSucceeded
  OrderSucceeded:
    Type: Succeed
  
  ReleaseInventory:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: "${ReleaseInventoryFunction}"
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: ProcessRefund
    Comment: Task to release order items back to inventory
    Catch:
      - ErrorEquals:
          - ErrReleaseInventory
        Next: "sns:NotifyReleaseInventoryFail"
        ResultPath: $.error
    TimeoutSeconds: 10
  
  "sns:NotifyReleaseInventoryFail":
    Type: Task
    Resource: "arn:aws:states:::sns:publish"
    Parameters:
      Message.$: $.order_id
      TopicArn: "${SagaTopic}"
    ResultPath: $.notification
    Next: OrderFailed

  ProcessRefund:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: "${CreditPaymentFunction}"
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: UpdateOrderStatus
    Comment: Task to process order refund
    Catch:
      - ErrorEquals:
          - ErrProcessRefund
        Next: "sns:NotifyProcessRefundFail"
        ResultPath: $.error
    TimeoutSeconds: 10
  
  "sns:NotifyProcessRefundFail":
    Type: Task
    Resource: "arn:aws:states:::sns:publish"
    Parameters:
      Message.$: $.order_id
      TopicArn: "${SagaTopic}"
    ResultPath: $.notification
    Next: OrderFailed

  UpdateOrderStatus:
    Type: Task
    Resource: 'arn:aws:states:::lambda:invoke'
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: "${UpdateOrderFunction}"
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Next: OrderFailed
    Comment: Task sets the order status to "pending".
    Catch:
      - ErrorEquals:
          - ErrUpdateOrderStatus
        Next:  "sns:NotifyUpdateOrderFail"
        ResultPath: $.error
    TimeoutSeconds: 10

  "sns:NotifyUpdateOrderFail":
    Type: Task
    Resource: "arn:aws:states:::sns:publish"
    Parameters:
      Message.$: $.order_id
      TopicArn: "${SagaTopic}"
    ResultPath: $.notification
    Next: OrderFailed

  OrderFailed:
    Type: Fail